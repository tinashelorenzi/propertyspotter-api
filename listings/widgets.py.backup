from django import forms
from django.utils.safestring import mark_safe
from django.forms.widgets import ClearableFileInput


class MultipleFileInput(forms.ClearableFileInput):
    allow_multiple_selected = True

    def __init__(self, attrs=None):
        if attrs is None:
            attrs = {}
        attrs.update({'multiple': True})
        super().__init__(attrs)

    def value_from_datadict(self, data, files, name):
        upload = files.getlist(name)
        if not upload:
            return None
        return upload

    def value_omitted_from_data(self, data, files, name):
        return name not in files

    def format_value(self, value):
        """Return the file object if it's not None."""
        return value

class MultipleImagePreviewWidget(MultipleFileInput):
    """
    A widget that shows existing images and allows uploading multiple new ones
    """
    
    def __init__(self, attrs=None):
        if attrs is None:
            attrs = {}
        attrs.update({
            'multiple': True, 
            'accept': 'image/*',
            'class': 'multiple-image-input'
        })
        super().__init__(attrs)
        
    def format_value(self, value):
        if value is None:
            return []
        if hasattr(value, '__iter__') and not isinstance(value, (str, bytes)):
            return list(value)
        return [value]
    
    def render(self, name, value, attrs=None, renderer=None):
        if attrs is None:
            attrs = {}
        
        # Ensure we have the required attributes
        attrs.update({
            'multiple': True, 
            'accept': 'image/*',
            'class': 'multiple-image-input'
        })
        
        # Get the basic file input HTML using parent's render method
        file_input = super().render(name, value, attrs, renderer)
        
        # Create the enhanced HTML with preview functionality
        html = f'''
        <div class="multiple-image-upload">
            <div class="upload-section" id="upload-section-{name}">
                {file_input}
                <div class="upload-help" style="margin-top: 10px; font-size: 12px; color: #666;">
                    <strong>Select multiple images at once!</strong><br>
                    Supported formats: JPG, PNG, GIF, WebP<br>
                    Hold Ctrl/Cmd to select multiple files
                </div>
            </div>
            
            <div id="upload-progress-{name}" class="upload-progress" style="display: none; margin-top: 15px; padding: 15px; background: white; border-radius: 4px; border-left: 4px solid #28a745;">
                <div class="progress-text" style="font-weight: 600; color: #28a745; margin-bottom: 5px;">Ready to upload images</div>
                <div class="file-count" id="file-count-{name}" style="color: #666; font-size: 13px;"></div>
            </div>
            
            <div id="error-messages-{name}"></div>
            
            <div id="preview-container-{name}" class="preview-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 15px; margin-top: 20px;"></div>
        </div>
        
        <style>
            .multiple-image-upload {{
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 20px;
                background: #f8f9fa;
                margin: 10px 0;
            }}
            
            .upload-section {{
                background: white;
                border: 2px dashed #ddd;
                border-radius: 6px;
                padding: 20px;
                text-align: center;
                margin-bottom: 20px;
            }}
            
            .upload-section:hover {{
                border-color: #007cba;
            }}
            
            .upload-section.dragover {{
                border-color: #007cba;
                background-color: #e8f4f8;
            }}
            
            .preview-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 15px;
                margin-top: 20px;
            }}
            
            .image-preview-item {{
                position: relative;
                border: 1px solid #ddd;
                border-radius: 6px;
                overflow: hidden;
                background: white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                transition: transform 0.2s ease;
            }}
            
            .image-preview-item:hover {{
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            }}
            
            .preview-image {{
                width: 100%;
                height: 120px;
                object-fit: cover;
                display: block;
            }}
            
            .image-info {{
                padding: 10px;
                font-size: 12px;
                line-height: 1.4;
            }}
            
            .image-name {{
                font-weight: 600;
                color: #333;
                margin-bottom: 4px;
                word-break: break-word;
            }}
            
            .image-details {{
                color: #666;
            }}
            
            .remove-image {{
                position: absolute;
                top: 8px;
                right: 8px;
                background: #dc3545;
                color: white;
                border: none;
                border-radius: 50%;
                width: 24px;
                height: 24px;
                font-size: 14px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                opacity: 0.9;
                transition: opacity 0.3s ease;
            }}
            
            .remove-image:hover {{
                opacity: 1;
            }}
            
            .upload-progress {{
                margin-top: 15px;
                padding: 15px;
                background: white;
                border-radius: 4px;
                border-left: 4px solid #28a745;
            }}
            
            .progress-text {{
                font-weight: 600;
                color: #28a745;
                margin-bottom: 5px;
            }}
            
            .file-count {{
                color: #666;
                font-size: 13px;
            }}
            
            .error-message {{
                background: #f8d7da;
                color: #721c24;
                padding: 10px;
                border-radius: 4px;
                margin-top: 10px;
                font-size: 13px;
            }}
        </style>
        
        <script>
        (function() {{
            const fieldName = '{name}';
            let selectedFiles = [];
            const maxFileSize = 10 * 1024 * 1024; // 10MB
            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
            
            const fileInput = document.querySelector('input[name="' + fieldName + '"]');
            
            if (fileInput) {{
                console.log('Found file input for field:', fieldName);
                
                // Ensure the parent form has the correct enctype
                const form = fileInput.closest('form');
                if (form) {{
                    form.setAttribute('enctype', 'multipart/form-data');
                    console.log('Set form enctype for file upload');
                }}
                
                fileInput.addEventListener('change', function(e) {{
                    console.log('File input changed, files:', e.target.files.length);
                    handleFiles(Array.from(e.target.files));
                }});
                
                // Drag and drop functionality
                const uploadSection = document.getElementById('upload-section-{name}');
                if (uploadSection) {{
                    uploadSection.addEventListener('dragover', function(e) {{
                        e.preventDefault();
                        uploadSection.classList.add('dragover');
                    }});
                    
                    uploadSection.addEventListener('dragleave', function(e) {{
                        e.preventDefault();
                        uploadSection.classList.remove('dragover');
                    }});
                    
                    uploadSection.addEventListener('drop', function(e) {{
                        e.preventDefault();
                        uploadSection.classList.remove('dragover');
                        
                        const files = Array.from(e.dataTransfer.files);
                        console.log('Files dropped:', files.length);
                        
                        // Update the file input with dropped files
                        const dt = new DataTransfer();
                        files.forEach(file => dt.items.add(file));
                        fileInput.files = dt.files;
                        
                        handleFiles(files);
                    }});
                }}
            }}
            
            function handleFiles(files) {{
                console.log('Handling files:', files.length);
                const validFiles = [];
                const errors = [];
                
                files.forEach(file => {{
                    // Validate file type
                    if (!allowedTypes.includes(file.type)) {{
                        errors.push(`${{file.name}}: Invalid file type. Please use JPG, PNG, GIF, or WebP.`);
                        return;
                    }}
                    
                    // Validate file size
                    if (file.size > maxFileSize) {{
                        errors.push(`${{file.name}}: File too large. Maximum size is 10MB.`);
                        return;
                    }}
                    
                    validFiles.push(file);
                }});
                
                // Show errors
                displayErrors(errors);
                
                if (validFiles.length > 0) {{
                    selectedFiles = validFiles;
                    showProgress(validFiles.length);
                    previewImages(validFiles);
                }}
            }}
            
            function showProgress(count) {{
                const progressDiv = document.getElementById('upload-progress-{name}');
                const countDiv = document.getElementById('file-count-{name}');
                
                if (progressDiv && countDiv) {{
                    progressDiv.style.display = 'block';
                    countDiv.textContent = `${{count}} image${{count !== 1 ? 's' : ''}} selected for upload`;
                }}
            }}
            
            function previewImages(files) {{
                const container = document.getElementById('preview-container-{name}');
                if (!container) return;
                
                container.innerHTML = '';
                
                files.forEach((file, index) => {{
                    const reader = new FileReader();
                    reader.onload = function(e) {{
                        const imageItem = document.createElement('div');
                        imageItem.className = 'image-preview-item';
                        imageItem.innerHTML = `
                            <img src="${{e.target.result}}" alt="Preview" class="preview-image">
                            <div class="image-info">
                                <div class="image-name">${{file.name}}</div>
                                <div class="image-details">
                                    ${{(file.size / 1024 / 1024).toFixed(2)}} MB<br>
                                    ${{file.type.split('/')[1].toUpperCase()}}
                                </div>
                            </div>
                        `;
                        container.appendChild(imageItem);
                    }};
                    reader.readAsDataURL(file);
                }});
            }}
            
            function displayErrors(errors) {{
                const errorContainer = document.getElementById('error-messages-{name}');
                if (!errorContainer) return;
                
                errorContainer.innerHTML = '';
                
                if (errors.length > 0) {{
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.innerHTML = '<strong>Upload Errors:</strong><br>' + errors.join('<br>');
                    errorContainer.appendChild(errorDiv);
                }}
            }}
        }})();
        </script>
        '''
        
        return mark_safe(html)
    
    def value_from_datadict(self, data, files, name):
        """
        Get the uploaded files from the request
        """
        upload = files.getlist(name)
        if not upload:
            return None
        return upload